on:
  workflow_call:
    inputs:
      site:
        required: true
        type: string
    secrets:
      server_host:
        required: true
      server_ssh_port:
        required: true
      server_key:
        required: true
      server_key_password:
        required: true

jobs:
  build-site:
    runs-on: ubuntu-latest
    name: Build ${{ inputs.site }}
    env:
      site_full_path: web/sites/${{ inputs.site }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 22

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: web
        run: pnpm install

      - name: Check code formatting
        working-directory: web
        run: pnpm run format:check

      - name: Build Libs
        working-directory: web
        run: pnpm run build:libs

      - name: Build project
        working-directory: web
        run: pnpm --filter "${{ inputs.site }}" run build

      - name: Audit Packages
        working-directory: ${{ env.site_full_path }}
        run: pnpm audit

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: site-dist-${{ inputs.site }}
          path: ${{ env.site_full_path }}/dist
          if-no-files-found: error

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy ${{ inputs.site }} To Staging
    needs: build-site
    environment: Staging
    if: needs.build-site.result == 'success' && github.ref == 'refs/heads/main'
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: site-dist-${{ inputs.site }}
          path: ./deploy

      - uses: appleboy/ssh-action@master
        name: Backup previous deployment
        with:
          host: ${{ secrets.server_host }}
          username: ci
          port: ${{ secrets.server_ssh_port }}
          key: ${{ secrets.server_key }}
          script: cp -r /var/www/staging.${{ inputs.site }} /var/www/backup/staging.${{ inputs.site }}-$(date +%F%H%M%S)

      - uses: appleboy/scp-action@master
        name: Deploy site via SCP
        with:
          host: ${{ secrets.server_host }}
          port: ${{ secrets.server_ssh_port }}
          username: ci
          key: ${{ secrets.server_key }}
          source: ./deploy
          target: "/var/www/staging.${{ inputs.site }}"
          tar_tmp_path: "/var/www/temp"
          strip_components: 2

      - name: Wait for 1 minute before verifying
        run: sleep 60

      - name: Verify website returns 200 (HTTPS) and 301 (HTTP)
        run: |
          HTTPS_STATUS=$(curl -Is -o /dev/null -w "%{http_code}" https://staging.${{ inputs.site }})
          HTTP_STATUS=$(curl -Is -o /dev/null -w "%{http_code}" http://staging.${{ inputs.site }})

          if [ "$HTTPS_STATUS" -ne 200 ]; then
            echo "‚ùå HTTPS check failed ‚Äî expected 200, got $HTTPS_STATUS"
            exit 1
          fi

          if [ "$HTTP_STATUS" -ne 301 ]; then
            echo "‚ùå HTTP check failed ‚Äî expected 301, got $HTTP_STATUS"
            exit 1
          fi

          echo "‚úÖ Website is up ‚Äî HTTPS: $HTTPS_STATUS, HTTP: $HTTP_STATUS"

  deploy-live:
    runs-on: ubuntu-latest
    name: Deploy ${{ inputs.site }} To Live
    needs: deploy-staging
    environment: Production
    if: needs.build-site.result == 'success' && github.ref == 'refs/heads/main'
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: site-dist-${{ inputs.site }}
          path: ./deploy

      - uses: appleboy/ssh-action@master
        name: Backup previous deployment
        with:
          host: ${{ secrets.server_host }}
          port: ${{ secrets.server_ssh_port }}
          username: ci
          key: ${{ secrets.server_key }}
          script: cp -r /var/www/${{ inputs.site }} /var/www/backup/${{ inputs.site }}-$(date +%F%H%M%S)

      - uses: appleboy/scp-action@master
        name: Deploy site via SCP
        with:
          host: ${{ secrets.server_host }}
          port: ${{ secrets.server_ssh_port }}
          username: ci
          key: ${{ secrets.server_key }}
          source: ./deploy
          target: "/var/www/${{ inputs.site }}"
          tar_tmp_path: "/var/www/temp"
          strip_components: 2

      - name: Wait for 1 minute before verifying
        run: sleep 60

      - name: Verify website returns 200 (HTTPS) and 301 (HTTP)
        run: |
          HTTPS_STATUS=$(curl -Is -o /dev/null -w "%{http_code}" https://${{ inputs.site }})
          HTTP_STATUS=$(curl -Is -o /dev/null -w "%{http_code}" http://${{ inputs.site }})
          
          if [ "$HTTPS_STATUS" -ne 200 ]; then
            echo "‚ùå HTTPS check failed ‚Äî expected 200, got $HTTPS_STATUS"
            exit 1
          fi
          
          if [ "$HTTP_STATUS" -ne 301 ]; then
            echo "‚ùå HTTP check failed ‚Äî expected 301, got $HTTP_STATUS"
            exit 1
          fi
          
          echo "‚úÖ Website is up ‚Äî HTTPS: $HTTPS_STATUS, HTTP: $HTTP_STATUS"

      - name: Rollback to previous deployment if verification failed
        if: failure()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.server_host }}
          port: ${{ secrets.server_ssh_port }}
          username: ci
          key: ${{ secrets.server_key }}
          passphrase: ${{ secrets.server_key_password }}
          script: |
            echo "üö® Rolling back to previous deployment..."
            LATEST_BACKUP=$(ls -td /var/www/backup/${{ inputs.site }}-* | head -n 1)
            if [ -d "$LATEST_BACKUP" ]; then
              rsync -a --delete "$LATEST_BACKUP"/ /var/www/${{ inputs.site }}/
              echo "‚úÖ Rollback complete: restored from $LATEST_BACKUP"
            else
              echo "‚ö†Ô∏è No backup found to restore from."
            fi